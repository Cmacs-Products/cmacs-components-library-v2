import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedOverlayPositionChange } from '@angular/cdk/overlay';
import { ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Subscription } from 'rxjs';
import { CmacsTreeSelectService } from './cmacs-tree-select.service';
import { CmacsTreeComponent } from "../cmacs-tree/cmacs-tree.component";
import { NzTreeBaseService } from '../cmacs-tree/tree/nz-tree-base.service';
import { NzTreeBase } from '../cmacs-tree/tree/nz-tree-base';
import { NzTreeNode, NzTreeNodeOptions } from '../cmacs-tree/tree/nz-tree-base-node';
import { NzSizeLDSType } from 'ng-zorro-antd/core/types';
import { NzFormatEmitEvent } from '../cmacs-tree/tree/nz-tree-base.definitions';
import { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';
import * as i0 from "@angular/core";
export declare function higherOrderServiceFactory(injector: Injector): NzTreeBaseService;
export declare class CmacsTreeSelectComponent extends NzTreeBase implements ControlValueAccessor, OnInit, OnDestroy, OnChanges, AfterViewInit {
    private renderer;
    private cdr;
    private elementRef;
    noAnimation?: NzNoAnimationDirective;
    allowClear: boolean;
    showExpand: boolean;
    showLine: boolean;
    expandedIcon: TemplateRef<{
        $implicit: NzTreeNode;
    }>;
    dropdownMatchSelectWidth: boolean;
    checkable: boolean;
    showSearch: boolean;
    disabled: boolean;
    asyncData: boolean;
    multiple: boolean;
    defaultExpandAll: boolean;
    cmacsOpen: boolean;
    inlineEdit: boolean;
    radio: boolean;
    notFoundContent: string;
    nodes: Array<NzTreeNode | NzTreeNodeOptions>;
    open: boolean;
    size: NzSizeLDSType;
    placeHolder: string;
    dropdownStyle: {
        [key: string]: string;
    };
    defaultExpandedKeys: string[];
    displayWith: (node: NzTreeNode) => string | undefined;
    maxTagCount: number;
    maxTagPlaceholder: TemplateRef<{
        $implicit: NzTreeNode[];
    }>;
    readonly openChange: EventEmitter<boolean>;
    readonly cleared: EventEmitter<void>;
    readonly removed: EventEmitter<NzTreeNode>;
    readonly expandChange: EventEmitter<NzFormatEmitEvent>;
    readonly treeClick: EventEmitter<NzFormatEmitEvent>;
    readonly treeCheckBoxChange: EventEmitter<NzFormatEmitEvent>;
    onaddchild: EventEmitter<NzTreeNode>;
    onaddparent: EventEmitter<any>;
    inputElement: ElementRef;
    treeRef: CmacsTreeComponent;
    cdkOverlayOrigin: CdkOverlayOrigin;
    cdkConnectedOverlay: CdkConnectedOverlay;
    triggerWidth: number;
    isComposing: boolean;
    isDestroy: boolean;
    isNotFound: boolean;
    inputValue: string;
    dropDownPosition: 'top' | 'center' | 'bottom';
    selectionChangeSubscription: Subscription;
    selectedNodes: NzTreeNode[];
    value: string[];
    onChange: (value: string[] | string | null) => void;
    onTouched: () => void;
    onaddparentevt($event: Event): void;
    addParent(node: any): void;
    get placeHolderDisplay(): string;
    get searchDisplay(): string;
    get isMultiple(): boolean;
    get selectedValueDisplay(): {
        [key: string]: string;
    };
    constructor(nzTreeService: CmacsTreeSelectService, renderer: Renderer2, cdr: ChangeDetectorRef, elementRef: ElementRef, noAnimation?: NzNoAnimationDirective);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    onaddchildevt($event: NzTreeNode): void;
    ngOnDestroy(): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: string[] | string): void;
    registerOnChange(fn: (_: string[] | string | null) => void): void;
    registerOnTouched(fn: () => void): void;
    trigger(): void;
    openDropdown(): void;
    closeDropDown(): void;
    onKeyDownInput(e: KeyboardEvent): void;
    onExpandedKeysChange(value: NzFormatEmitEvent): void;
    setInputValue(value: string): void;
    removeSelected(node: NzTreeNode, emit?: boolean, event?: MouseEvent): void;
    focusOnInput(): void;
    subscribeSelectionChange(): Subscription;
    updateSelectedNodes(init?: boolean): void;
    updatePosition(): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    updateInputWidth(): void;
    onClearSelection($event: MouseEvent): void;
    setSearchValues($event: NzFormatEmitEvent): void;
    updateCdkConnectedOverlayStatus(): void;
    trackValue(_index: number, option: NzTreeNode): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<CmacsTreeSelectComponent, [null, null, null, null, { optional: true; host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CmacsTreeSelectComponent, "cmacs-tree-select", ["cmacsTreeSelect"], { "allowClear": { "alias": "allowClear"; "required": false; }; "showExpand": { "alias": "showExpand"; "required": false; }; "showLine": { "alias": "showLine"; "required": false; }; "expandedIcon": { "alias": "expandedIcon"; "required": false; }; "dropdownMatchSelectWidth": { "alias": "dropdownMatchSelectWidth"; "required": false; }; "checkable": { "alias": "checkable"; "required": false; }; "showSearch": { "alias": "showSearch"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "asyncData": { "alias": "asyncData"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "defaultExpandAll": { "alias": "defaultExpandAll"; "required": false; }; "cmacsOpen": { "alias": "cmacsOpen"; "required": false; }; "inlineEdit": { "alias": "inlineEdit"; "required": false; }; "radio": { "alias": "radio"; "required": false; }; "notFoundContent": { "alias": "notFoundContent"; "required": false; }; "nodes": { "alias": "nodes"; "required": false; }; "open": { "alias": "open"; "required": false; }; "size": { "alias": "size"; "required": false; }; "placeHolder": { "alias": "placeHolder"; "required": false; }; "dropdownStyle": { "alias": "dropdownStyle"; "required": false; }; "defaultExpandedKeys": { "alias": "defaultExpandedKeys"; "required": false; }; "displayWith": { "alias": "displayWith"; "required": false; }; "maxTagCount": { "alias": "maxTagCount"; "required": false; }; "maxTagPlaceholder": { "alias": "maxTagPlaceholder"; "required": false; }; }, { "openChange": "openChange"; "cleared": "cleared"; "removed": "removed"; "expandChange": "expandChange"; "treeClick": "treeClick"; "treeCheckBoxChange": "treeCheckBoxChange"; "onaddchild": "onaddchild"; "onaddparent": "onaddparent"; }, never, never, false, never>;
}
//# sourceMappingURL=cmacs-tree-select.component.d.ts.map