import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedOverlayPositionChange, ConnectionPositionPair, HorizontalConnectionPos, VerticalConnectionPos } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { Direction } from '@angular/cdk/bidi';
import { CandyDate, CompatibleValue } from 'ng-zorro-antd/core/time';
import { NgStyleInterface, NzSafeAny } from 'ng-zorro-antd/core/types';
import { DateHelperService, NzI18nService } from 'ng-zorro-antd/i18n';
import { Subject } from 'rxjs';
import { DatePickerService } from './date-picker.service';
import { DateRangePopupComponent } from './date-range-popup.component';
import { RangePartType } from './standard-types';
import { NzResizeObserver } from 'ng-zorro-antd/cdk/resize-observer';
import * as i0 from "@angular/core";
export declare class CmacsPickerComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private elementRef;
    private dateHelper;
    protected i18n: NzI18nService;
    private cdr;
    private platform;
    private ngZone;
    private nzResizeObserver;
    datePickerService: DatePickerService;
    noAnimation: boolean;
    isRange: boolean;
    open: boolean | undefined;
    disabled: boolean;
    timeline: boolean;
    inputReadOnly: boolean;
    placeholder: string | string[];
    allowClear?: boolean;
    autoFocus?: boolean;
    format: string;
    separator?: string;
    popupStyle: NgStyleInterface | null;
    dropdownClassName?: string;
    suffixIcon?: string | TemplateRef<NzSafeAny>;
    dir: Direction;
    id: string | null;
    cmacsOpen: boolean;
    readonly focusChange: EventEmitter<boolean>;
    readonly valueChange: EventEmitter<CandyDate | CandyDate[]>;
    readonly openChange: EventEmitter<boolean>;
    cdkConnectedOverlay?: CdkConnectedOverlay;
    separatorElement?: ElementRef;
    pickerInput?: ElementRef<HTMLInputElement>;
    rangePickerInputs?: QueryList<ElementRef<HTMLInputElement>>;
    panel: DateRangePopupComponent;
    calcWidth: number;
    origin: CdkOverlayOrigin;
    document: Document;
    inputSize: number;
    inputWidth?: number;
    destroy$: Subject<unknown>;
    prefixCls: string;
    inputValue: NzSafeAny;
    activeBarStyle: object;
    overlayOpen: boolean;
    overlayPositions: ConnectionPositionPair[];
    currentPositionX: HorizontalConnectionPos;
    currentPositionY: VerticalConnectionPos;
    state: string;
    get realOpenState(): boolean;
    constructor(elementRef: ElementRef, dateHelper: DateHelperService, i18n: NzI18nService, cdr: ChangeDetectorRef, platform: Platform, ngZone: NgZone, nzResizeObserver: NzResizeObserver, datePickerService: DatePickerService, doc: NzSafeAny);
    scroll: (e: Event) => void;
    setPanelWidth(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    updateInputWidthAndArrowLeft(): void;
    getInput(partType?: RangePartType): HTMLInputElement | undefined;
    focus(): void;
    onFocus(event: FocusEvent, partType?: RangePartType): void;
    onBlur(event: FocusEvent): void;
    showOverlay(): void;
    hideOverlay(): void;
    showClear(): boolean;
    onClickInputBox(event: MouseEvent): void;
    onClickOutside(event: MouseEvent): void;
    onOverlayDetach(): void;
    onOverlayKeydown(event: KeyboardEvent): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    onClickClear(event: MouseEvent): void;
    updateInputValue(): void;
    formatValue(value: CandyDate): string;
    onInputChange(value: string, isEnter?: boolean): void;
    onKeyupEnter(event: Event): void;
    private checkValidDate;
    getPlaceholder(partType?: RangePartType): string;
    isEmptyValue(value: CompatibleValue): boolean;
    isOpenHandledByUser(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<CmacsPickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CmacsPickerComponent, "[cmacs-picker]", ["cmacsPicker"], { "noAnimation": { "alias": "noAnimation"; "required": false; }; "isRange": { "alias": "isRange"; "required": false; }; "open": { "alias": "open"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "timeline": { "alias": "timeline"; "required": false; }; "inputReadOnly": { "alias": "inputReadOnly"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "allowClear": { "alias": "allowClear"; "required": false; }; "autoFocus": { "alias": "autoFocus"; "required": false; }; "format": { "alias": "format"; "required": false; }; "separator": { "alias": "separator"; "required": false; }; "popupStyle": { "alias": "popupStyle"; "required": false; }; "dropdownClassName": { "alias": "dropdownClassName"; "required": false; }; "suffixIcon": { "alias": "suffixIcon"; "required": false; }; "dir": { "alias": "dir"; "required": false; }; "id": { "alias": "id"; "required": false; }; "cmacsOpen": { "alias": "cmacsOpen"; "required": false; }; }, { "focusChange": "focusChange"; "valueChange": "valueChange"; "openChange": "openChange"; }, ["panel"], ["*"], false, never>;
}
//# sourceMappingURL=picker.component.d.ts.map