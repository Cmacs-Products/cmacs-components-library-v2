/** get some code from https://github.com/angular/material2 */
import { Direction, Directionality } from '@angular/cdk/bidi';
import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NzSafeAny, NzSizeLDSType } from 'ng-zorro-antd/core/types';
import { NzAnimatedInterface, NzTabChangeEvent, NzTabPosition, NzTabPositionMode, NzTabsCanDeactivateFn, NzTabScrollEvent, NzTabType } from './interfaces';
import { CmacsTabNavBarComponent } from './tab-nav-bar.component';
import { CmacsTabComponent } from './tab.component';
import * as i0 from "@angular/core";
export type CmacsTabType = 'text' | 'icon' | 'ems' | 'schedule' | 'property';
export declare class CmacsTabSetComponent implements OnInit, AfterContentChecked, OnDestroy, AfterContentInit {
    nzConfigService: NzConfigService;
    private cdr;
    private directionality;
    private router;
    get cmacsSelectedIndex(): number | null;
    set cmacsSelectedIndex(value: null | number);
    tabPosition: NzTabPosition;
    tabBarExtraContent?: TemplateRef<void>;
    canDeactivate: NzTabsCanDeactivateFn | null;
    addIcon: string | TemplateRef<NzSafeAny>;
    tabBarStyle: {
        [key: string]: string;
    } | null;
    type: NzTabType;
    size: NzSizeLDSType;
    animated: NzAnimatedInterface | boolean;
    tabBarGutter?: number;
    hideAdd: boolean;
    centered: boolean;
    hideAll: boolean;
    linkRouter: boolean;
    linkExact: boolean;
    cmacsType: CmacsTabType;
    readonly selectChange: EventEmitter<NzTabChangeEvent>;
    readonly selectedIndexChange: EventEmitter<number>;
    readonly tabListScroll: EventEmitter<NzTabScrollEvent>;
    readonly close: EventEmitter<{
        index: number;
    }>;
    readonly add: EventEmitter<void>;
    get position(): NzTabPositionMode;
    get addable(): boolean;
    get closable(): boolean;
    get line(): boolean;
    get inkBarAnimated(): boolean;
    get tabPaneAnimated(): boolean;
    allTabs: QueryList<CmacsTabComponent>;
    tabNavBarRef: CmacsTabNavBarComponent;
    tabs: QueryList<CmacsTabComponent>;
    dir: Direction;
    private readonly tabSetId;
    private destroy$;
    private indexToSelect;
    private selectedIndex;
    private tabLabelSubscription;
    private tabsSubscription;
    private canDeactivateSubscription;
    constructor(nzConfigService: NzConfigService, cdr: ChangeDetectorRef, directionality: Directionality, router: Router);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    ngAfterContentChecked(): void;
    onClose(index: number, e: MouseEvent): void;
    onAdd(): void;
    private clampTabIndex;
    private createChangeEvent;
    private subscribeToTabLabels;
    private subscribeToAllTabChanges;
    canDeactivateFun(pre: number, next: number): Observable<boolean>;
    clickNavItem(tab: CmacsTabComponent, index: number, e: MouseEvent): void;
    private isRouterLinkClickEvent;
    contextmenuNavItem(tab: CmacsTabComponent, e: MouseEvent): void;
    setSelectedIndex(index: number): void;
    getTabIndex(tab: CmacsTabComponent, index: number): number | null;
    getTabContentId(i: number): string;
    private setUpRouter;
    private updateRouterActive;
    private findShouldActiveTabIndex;
    private isLinkActive;
    private getTabContentMarginValue;
    getTabContentMarginLeft(): string;
    getTabContentMarginRight(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<CmacsTabSetComponent, [null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CmacsTabSetComponent, "cmacs-tabset", ["cmacsTabset"], { "cmacsSelectedIndex": { "alias": "cmacsSelectedIndex"; "required": false; }; "tabPosition": { "alias": "tabPosition"; "required": false; }; "tabBarExtraContent": { "alias": "tabBarExtraContent"; "required": false; }; "canDeactivate": { "alias": "canDeactivate"; "required": false; }; "addIcon": { "alias": "addIcon"; "required": false; }; "tabBarStyle": { "alias": "tabBarStyle"; "required": false; }; "type": { "alias": "type"; "required": false; }; "size": { "alias": "size"; "required": false; }; "animated": { "alias": "animated"; "required": false; }; "tabBarGutter": { "alias": "tabBarGutter"; "required": false; }; "hideAdd": { "alias": "hideAdd"; "required": false; }; "centered": { "alias": "centered"; "required": false; }; "hideAll": { "alias": "hideAll"; "required": false; }; "linkRouter": { "alias": "linkRouter"; "required": false; }; "linkExact": { "alias": "linkExact"; "required": false; }; "cmacsType": { "alias": "cmacsType"; "required": false; }; }, { "selectChange": "selectChange"; "selectedIndexChange": "selectedIndexChange"; "tabListScroll": "tabListScroll"; "close": "close"; "add": "add"; }, ["allTabs"], never, false, never>;
}
//# sourceMappingURL=tabset.component.d.ts.map