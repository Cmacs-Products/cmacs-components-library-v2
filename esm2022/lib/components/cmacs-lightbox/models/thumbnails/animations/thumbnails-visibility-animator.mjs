import { Animator } from '../../Animator';
export class ThumbnailsVisibilityAnimator extends Animator {
    constructor(direction, thickness) {
        super();
        this._thickness = thickness;
        this.setDirection(direction);
    }
    setDirection(direction) {
        this._direction = direction;
        const params = {
            maxHeight: direction === 'horizontal' ? '0px' : '100%',
            maxWidth: direction === 'horizontal' ? '100%' : '0px',
            duration: 0
        };
        this.animate(params, null, null);
    }
    setThickness(duration, thickness) {
        this._thickness = thickness;
        const params = {
            maxHeight: this._direction === 'horizontal' ? (this.animation.params.maxHeight === '0px' ? '0px' : thickness + 'px') : '100%',
            maxWidth: this._direction === 'horizontal' ? '100%' : (this.animation.params.maxWidth === '0px' ? '0px' : thickness + 'px'),
            duration
        };
        this.animate(params, null, null);
    }
    hide(duration, startCb, doneCb) {
        const params = {
            maxHeight: this._direction === 'horizontal' ? '0px' : '100%',
            maxWidth: this._direction === 'horizontal' ? '100%' : '0px',
            duration
        };
        this.animate(params, () => {
            if (startCb) {
                startCb();
            }
        }, () => {
            if (doneCb) {
                doneCb();
            }
        });
    }
    show(duration, startCb, doneCb) {
        const params = {
            maxHeight: this._direction === 'horizontal' ? this._thickness + 'px' : '100%',
            maxWidth: this._direction === 'horizontal' ? '100%' : this._thickness + 'px',
            duration
        };
        this.animate(params, () => {
            if (startCb) {
                startCb();
            }
        }, () => {
            if (doneCb) {
                doneCb();
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWJuYWlscy12aXNpYmlsaXR5LWFuaW1hdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY21hY3MtY29tcG9uZW50cy12Mi1saWIvc3JjL2xpYi9jb21wb25lbnRzL2NtYWNzLWxpZ2h0Ym94L21vZGVscy90aHVtYm5haWxzL2FuaW1hdGlvbnMvdGh1bWJuYWlscy12aXNpYmlsaXR5LWFuaW1hdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsUUFBdUM7SUFNckYsWUFBWSxTQUFvQyxFQUFFLFNBQWlCO1FBQy9ELEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU0sWUFBWSxDQUFDLFNBQW9DO1FBRXBELElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBRTVCLE1BQU0sTUFBTSxHQUFHO1lBQ1gsU0FBUyxFQUFFLFNBQVMsS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTTtZQUN0RCxRQUFRLEVBQUUsU0FBUyxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLO1lBQ3JELFFBQVEsRUFBRSxDQUFDO1NBQ2QsQ0FBQztRQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sWUFBWSxDQUFDLFFBQWdCLEVBQUUsU0FBaUI7UUFFbkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFFNUIsTUFBTSxNQUFNLEdBQUc7WUFDWCxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVUsS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07WUFDN0gsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQzNILFFBQVE7U0FDWCxDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxJQUFJLENBQUMsUUFBZ0IsRUFBRSxPQUFvQixFQUFFLE1BQW1CO1FBRW5FLE1BQU0sTUFBTSxHQUFHO1lBQ1gsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU07WUFDNUQsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUs7WUFDM0QsUUFBUTtTQUNYLENBQUM7UUFFRixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFFdEIsSUFBSSxPQUFPLEVBQUU7Z0JBRVQsT0FBTyxFQUFFLENBQUM7YUFDYjtRQUNMLENBQUMsRUFBRSxHQUFHLEVBQUU7WUFFSixJQUFJLE1BQU0sRUFBRTtnQkFFUixNQUFNLEVBQUUsQ0FBQzthQUNaO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sSUFBSSxDQUFDLFFBQWdCLEVBQUUsT0FBb0IsRUFBRSxNQUFtQjtRQUVuRSxNQUFNLE1BQU0sR0FBRztZQUNYLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVSxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU07WUFDN0UsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSTtZQUM1RSxRQUFRO1NBQ1gsQ0FBQztRQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUV0QixJQUFJLE9BQU8sRUFBRTtnQkFFVCxPQUFPLEVBQUUsQ0FBQzthQUNiO1FBQ0wsQ0FBQyxFQUFFLEdBQUcsRUFBRTtZQUVKLElBQUksTUFBTSxFQUFFO2dCQUVSLE1BQU0sRUFBRSxDQUFDO2FBQ1o7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFuaW1hdGlvbkV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XHJcbmltcG9ydCB7IFRodW1ibmFpbHNWaXNpYmlsaXR5QW5pbWF0aW9uIH0gZnJvbSAnLi90aHVtYm5haWxzLXZpc2liaWxpdHktYW5pbWF0aW9uLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBBbmltYXRvciB9IGZyb20gJy4uLy4uL0FuaW1hdG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUaHVtYm5haWxzVmlzaWJpbGl0eUFuaW1hdG9yIGV4dGVuZHMgQW5pbWF0b3I8VGh1bWJuYWlsc1Zpc2liaWxpdHlBbmltYXRpb24+IHtcclxuXHJcbiAgICBwcml2YXRlIF9kaXJlY3Rpb246ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCc7XHJcblxyXG4gICAgcHJpdmF0ZSBfdGhpY2tuZXNzOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGlyZWN0aW9uOiAndmVydGljYWwnIHwgJ2hvcml6b250YWwnLCB0aGlja25lc3M6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5fdGhpY2tuZXNzID0gdGhpY2tuZXNzO1xyXG4gICAgICAgIHRoaXMuc2V0RGlyZWN0aW9uKGRpcmVjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldERpcmVjdGlvbihkaXJlY3Rpb246ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCcpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG5cclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG1heEhlaWdodDogZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAnMHB4JyA6ICcxMDAlJyxcclxuICAgICAgICAgICAgbWF4V2lkdGg6IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJzEwMCUnIDogJzBweCcsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5hbmltYXRlKHBhcmFtcywgbnVsbCwgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFRoaWNrbmVzcyhkdXJhdGlvbjogbnVtYmVyLCB0aGlja25lc3M6IG51bWJlcik6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLl90aGlja25lc3MgPSB0aGlja25lc3M7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgbWF4SGVpZ2h0OiB0aGlzLl9kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICh0aGlzLmFuaW1hdGlvbi5wYXJhbXMubWF4SGVpZ2h0ID09PSAnMHB4JyA/ICcwcHgnIDogdGhpY2tuZXNzICsgJ3B4JykgOiAnMTAwJScsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiB0aGlzLl9kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICcxMDAlJyA6ICh0aGlzLmFuaW1hdGlvbi5wYXJhbXMubWF4V2lkdGggPT09ICcwcHgnID8gJzBweCcgOiB0aGlja25lc3MgKyAncHgnKSxcclxuICAgICAgICAgICAgZHVyYXRpb25cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmFuaW1hdGUocGFyYW1zLCBudWxsLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaGlkZShkdXJhdGlvbjogbnVtYmVyLCBzdGFydENiPzogKCkgPT4gdm9pZCwgZG9uZUNiPzogKCkgPT4gdm9pZCk6IHZvaWQge1xyXG5cclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG1heEhlaWdodDogdGhpcy5fZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAnMHB4JyA6ICcxMDAlJyxcclxuICAgICAgICAgICAgbWF4V2lkdGg6IHRoaXMuX2RpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJzEwMCUnIDogJzBweCcsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5hbmltYXRlKHBhcmFtcywgKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgaWYgKHN0YXJ0Q2IpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzdGFydENiKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAoZG9uZUNiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9uZUNiKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2hvdyhkdXJhdGlvbjogbnVtYmVyLCBzdGFydENiPzogKCkgPT4gdm9pZCwgZG9uZUNiPzogKCkgPT4gdm9pZCk6IHZvaWQge1xyXG5cclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG1heEhlaWdodDogdGhpcy5fZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyB0aGlzLl90aGlja25lc3MgKyAncHgnIDogJzEwMCUnLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogdGhpcy5fZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAnMTAwJScgOiB0aGlzLl90aGlja25lc3MgKyAncHgnLFxyXG4gICAgICAgICAgICBkdXJhdGlvblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuYW5pbWF0ZShwYXJhbXMsICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdGFydENiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RhcnRDYigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgaWYgKGRvbmVDYikge1xyXG5cclxuICAgICAgICAgICAgICAgIGRvbmVDYigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19